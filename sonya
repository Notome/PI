class RR:
    def __init__(self, salty, fresh):
        self.salty = salty
        self.fresh = fresh
    
    def show(self):
        print(f'Соленый: {self.salty}, Пресный: {self.fresh}')


class Fish(RR):
    def __init__(self, salty, fresh, name, edible, inedible, predatory, nonpredatory):
        super().__init__(salty, fresh)
        self.name = name
        self.edible = edible
        self.inedible = inedible
        self.predatory = predatory
        self.nonpredatory = nonpredatory
    
    def show(self):
        super().show()
        print(f'Название: {self.name}, Съедобная: {self.edible}, Несъедобная: {self.inedible}, Хищная: {self.predatory}, Не хищная: {self.nonpredatory}')


class Jellyfish(RR):
    def __init__(self, salty, fresh, species, poisonous, nonpoisonous):
        super().__init__(salty, fresh)
        self.species = species
        self.poisonous = poisonous
        self.nonpoisonous = nonpoisonous

    def show(self):
        super().show()
        print(f'Вид: {self.species}, Ядовитая: {self.poisonous}, Неядовитая: {self.nonpoisonous}')


class Mollusc(RR):
    def __init__(self, salty, fresh, name, edible, nonedible, racovina, nonracovina):
        super().__init__(salty, fresh)
        self.name = name
        self.edible = edible
        self.nonedible = nonedible
        self.racovina = racovina
        self.nonracovina = nonracovina

    def show(self):
        super().show()
        print(f'Название: {self.name}, Съедобная: {self.edible}, Несъедобная: {self.nonedible}, Раковина: {self.racovina}, Нет раковины: {self.nonracovina}')


fish = Fish('селедка', 'съедобная', 'Имя рыбы', 'да', 'нет', 'да', 'нет')
jellyfish = Jellyfish('розовая', 'ядовитая', 'Вид медузы', 'да', 'нет')
mollusc = Mollusc('красный', 'съедобный', 'Имя моллюска', 'да', 'нет', 'да', 'нет')

fish.show()
jellyfish.show()
mollusc.show()


import math

class AB:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class L(AB):
    def __init__(self, x, y, x1, y1):
        super().__init__(x, y)
        self.x1 = x1
        self.y1 = y1

    def length(self):
        return math.sqrt((self.x1 - self.x) ** 2 + (self.y1 - self.y) ** 2)

class S(L):
    def __init__(self, x, y, x1, y1):
        super().__init__(x, y, x1, y1)

    def square(self):
        a = self.length()
        return math.pi * a ** 2

class V(L):
    def __init__(self, x, y, x1, y1):
        super().__init__(x, y, x1, y1)

    def volume(self):
        a = self.length()
        return (1/3) * math.pi * a ** 2

line = L(1, 3, 2, 0)
square = S(2, 3, 4, 5)
volume = V(4, 3, 2, 1)

print(line.length())
print(square.square())
print(volume.volume())
